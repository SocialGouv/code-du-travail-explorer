---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
  template:
    metadata:
      labels:
        app: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
        git/branch: ${BRANCH_NAME}
        git/commit: ${COMMIT}
        gitlab/job: "${JOB_ID}"
    spec:
      containers:
        - image: ${IMAGE_NAME}:${IMAGE_TAG}
          name: ${K8S_NAMESPACE}-${CONTEXT}
          ports:
            - containerPort: ${PORT}
          livenessProbe:
            httpGet:
              path: /api/v1/version
              port: ${PORT}
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /api/v1/version
              port: ${PORT}
            initialDelaySeconds: 10
            periodSeconds: 5
          env:
            - name: PORT
              value: "${PORT}"
            - name: ELASTICSEARCH_URL
              value: "${K8S_SECRET_ELASTICSEARCH_URL}"
            - name: ELASTICSEARCH_PWD
              value: "${K8S_SECRET_ELASTICSEARCH_PWD}"
            - name: VERSION
              value: "${VERSION}"
            - name: NLP_URL
              value: "${NLP_API_URL}"
            - name: ES_INDEX_PREFIX
              value: "cdtn-${BRANCH_HASH}"
      initContainers:
        - name: wait-for-elasticsearch
          image: alpine
          imagePullPolicy: Always
          command:
            - sh
            - -c
            - |
              apk add --no-cache curl=7.66.0-r0;

              retry=120; # 5s * (12 * 10) = 10min
              while
                ! curl -sS --fail "elastic:${K8S_SECRET_ELASTICSEARCH_PWD}@${K8S_SECRET_ELASTICSEARCH_URL}/_cat/indices/${BRANCH_HASH}_documents" &&
                [[ $(( retry-- )) -gt 0 ]];
              do echo "Waiting for Elasticsearch indices to go Green ($(( retry )))" ; sleep 5s ; done ;

              [[ $(( retry )) -lt 1 ]] && exit 128;

              echo Ready;
