---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
  template:
    metadata:
      labels:
        app: ${K8S_NAMESPACE}-${CONTEXT}-${BRANCH_HASH}
        git/branch: ${BRANCH_NAME}
        git/commit: ${COMMIT}
        gitlab/job: "${JOB_ID}"
    spec:
      containers:
        - image: ${IMAGE_NAME}:${IMAGE_TAG}
          name: ${K8S_NAMESPACE}-${CONTEXT}
          ports:
            - containerPort: ${PORT}
          livenessProbe:
            httpGet:
              path: /
              port: ${PORT}
            initialDelaySeconds: 3
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: ${PORT}
            initialDelaySeconds: 3
            periodSeconds: 5
          env:
            - name: API_URL
              value: "${API_URL}/api/v1"
            - name: ENVIRONMENT
              value: ${ENVIRONMENT}
            - name: FRONTEND_HOST
              value: ${FRONTEND_HOST}
            - name: PIWIK_SITE_ID
              value: ${CI_PIWIK_SITE_ID}
            - name: PIWIK_URL
              value: ${CI_PIWIK_URL}
            - name: SUGGEST_URL
              value: "${NLP_URL}/api/suggest"
            - name: VERSION
              value: "${VERSION}"
      initContainers:
        - name: wait-for-api
          image: alpine
          imagePullPolicy: Always
          command:
            - sh
            - -c
            - |
              apk --no-cache --update add curl;

              retry=120; # 5s * (12 * 10) = 10min
              while
                ! curl -sS "${API_URL}/api/v1/version" &&
                [[ $(( retry-- )) -gt 0 ]];
              do echo "Waiting for api to respond ($(( retry )))" ; sleep 5s ; done ;

              [[ $(( retry )) -lt 1 ]] && exit 128;

              echo Ready;
