---
include:
  - /.gitlab-ci/variables.yml
  # - /.gitlab-ci/extends.yml
  # - /.gitlab-ci/stages/prepare.yml
  - /.gitlab-ci/stages/quality.yml
  # - /.gitlab-ci/stages/register.yml
  # - /.gitlab-ci/stages/scan.yml
  # - /.gitlab-ci/stages/deploy.yml
  # - /.gitlab-ci/stages/notify.yml

variables:
  APM_SERVER_PORT: 8200
  DOCKER_COMPOSE_VERSION: "1.23.2"
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_VERSION: 18
  ELASTICSEARCH_INTER_NODE_PORT: 9300
  ELASTICSEARCH_PORT: 9200
  FRONTEND_PORT: 3000
  GIT_STRATEGY: fetch
  HASH_SIZE: 7
  IMAGE_INFRA_BASE_NAME: infra/images-docker
  KIBANA_PORT: 5601
  NLP_PORT: 5000
  PYTHON_VERSION: 3.7.2-alpine
  SUGGEST_DATA_URL: "https://gist.githubusercontent.com/ArmandGiraud/aaa65ed694e6b8d46918d44e41bae9e4/raw/2b5fa5ff67d87bbf08b33fecfe2fb98e15c73a06/data-test.txt"

.base_docker_image_stage:
  image: docker:$DOCKER_VERSION
  services:
    - docker:$DOCKER_VERSION-dind

#

.base_docker_kube_image_stage:
  image:
    name: $CI_REGISTRY/$IMAGE_INFRA_BASE_NAME/docker-kube:latest
    entrypoint: [""]
  before_script:
    - source ./.gitlab-ci/env.sh
    - /apps/create-kubeconfig.sh
    - if [ -n "${PRODUCTION+x}" ]; then SUFFIX=".prod"; else SUFFIX=".dev"; fi

#

.base_register_stage:
  extends: .base_docker_image_stage
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login $CI_REGISTRY -u gitlab-ci-token --password-stdin
  script:
    - >
      if [[ -n "${CI_COMMIT_TAG}" ]]; then
        export TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
      else
        export TAG=$CI_COMMIT_REF_SLUG
      fi
    #
    - docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || true
    - docker pull $IMAGE_NAME:$TAG || true
    - docker pull $IMAGE_NAME:master || true
    - echo "> docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA --cache-from $IMAGE_NAME:$TAG --cache-from $IMAGE_NAME:master -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:$TAG $CONTEXT"
    - docker build $DOCKER_BUILD_ARGS --cache-from $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA --cache-from $IMAGE_NAME:$TAG --cache-from $IMAGE_NAME:master -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:$TAG $CONTEXT
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:$TAG

#

.prepare_stage: &prepare_stage
  stage: "Prepare"
  dependencies: []
  except:
    variables:
      - $PRODUCTION

.cache_template: &cache_template
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - node_modules/

Build yarn cache:
  <<: *prepare_stage
  image: node:10-alpine
  cache:
    <<: *cache_template
  script:
    - yarn --frozen-lockfile

Register elasticsearch image:
  <<: *prepare_stage
  extends: .base_register_stage
  variables:
    CONTEXT: ./docker/elasticsearch
    DOCKER_BUILD_ARGS: ""
    IMAGE_NAME: $CI_REGISTRY_IMAGE/elasticsearch
#

stages:
  - "Prepare"
  - "Code Quality"
  # - "Registration"
  # - "Post Registration"
  # - "Vuln scanner"
  # - "Deploy"
  # - "Notify Finished Deployment"
