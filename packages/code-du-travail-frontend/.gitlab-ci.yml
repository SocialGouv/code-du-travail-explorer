---
include:
  - project: SocialGouv/gitlab-ci-yml
    file:
      - /base_register_docker_stage.yml
    ref: v20.7.14

#
#
#

variables:
  #
  PACKAGE: code-du-travail-frontend
  PACKAGE_CWD: packages/${PACKAGE}
  #
  CACHE_FALLBACK_KEY: ${PACKAGE}-${CI_JOB_NAME}-${CI_DEFAULT_BRANCH}
  MONOREPO_CACHE_FOLDER: "$CI_PROJECT_DIR/.cache/monorepo"
  #
  GIT_STRATEGY: fetch
  GIT_DEPTH: 3

before_script:
  - wget -qO ./.gitlab-ci/monorepo.sh https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/master/monorepo.sh
  - sh ./.gitlab-ci/monorepo.sh skip && exit 0 || true
  - cd "${PACKAGE_CWD}"

Install:
  stage: .pre
  image: node:14.16-alpine3.13
  needs: []
  cache:
    key: ${PACKAGE}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - .cache
      - ${PACKAGE_CWD}/node_modules
      - node_modules
  before_script:
    - wget -qO ./.gitlab-ci/monorepo.sh https://raw.githubusercontent.com/SocialGouv/gitlab-ci-yml/master/monorepo.sh
    - sh ./.gitlab-ci/monorepo.sh has-changed
        --find-ignore "*/node_modules/*"
        --verbose
        ${PACKAGE_CWD} || true
    - |
      sh ./.gitlab-ci/monorepo.sh skip && {
        rm -rf .cache/yarn "${PACKAGE_CWD}/node_modules" node_modules;
        exit 0;
      } || true
  script:
    - yarn config set cache-folder ${CI_PROJECT_DIR}/.cache/yarn
    - yarn global add @socialgouv/yarn-workspace-focus-install
    - yarn exec yarn-workspace-focus-install -- --cwd ${PACKAGE_CWD} -- --frozen-lockfile --prefer-offline
  artifacts:
    expire_in: 1 week
    paths:
      - ${MONOREPO_CACHE_FOLDER}/skip
      - ${PACKAGE_CWD}/node_modules
      - node_modules

#
#
#

Build:
  stage: build
  image: node:14.16-alpine3.13
  cache:
    key: ${PACKAGE}-${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}
    paths:
      - ${PACKAGE_CWD}/.next
  variables:
    CI_DEBUG_TRACE: "true"
  needs:
    - job: Install
      artifacts: true
  script:
    # NOTE(douglasduteil): ensure to have clean build
    - rm -rf .next
    - yarn build
  artifacts:
    expire_in: 1 week
    paths:
      - ${PACKAGE_CWD}/.next

#
#
#

Lint:
  stage: build
  image: node:14.16-alpine3.13
  needs:
    - job: Install
      artifacts: true
  script:
    - yarn lint

Lint Dockerfiles:
  stage: build
  needs: []
  image: hadolint/hadolint:v1.23.0-alpine
  script:
    - hadolint ./Dockerfile

#
#
#

Test:
  stage: build
  image: node:14.16-alpine3.13
  needs:
    - job: Install
      artifacts: true
    - job: lib logger
      artifacts: true
    - job: Register elasticsearch image
  services:
    - name: $CI_REGISTRY_IMAGE/elasticsearch:$CI_COMMIT_SHA
      alias: elasticsearch
      command:
        - "bin/elasticsearch"
        - "-Expack.security.enabled=false"
        - "-Ediscovery.type=single-node"
  variables:
    ELASTICSEARCH_URL: http://elasticsearch:$ELASTICSEARCH_PORT
    # HACK(douglasduteil): make ES not that memory hungry
    ES_JAVA_OPTS: "-Xms256m -Xmx256m"
  script:
    # NOTE(douglasduteil): the elasticsearch health check must be last
    # As we block the job waiting for elasticsearch to be up.
    - |-
      echo "connecting to ${CI_REGISTRY_IMAGE}/elasticsearch:${CI_COMMIT_SHA}";
      echo "${ELASTICSEARCH_URL}";
      retry=60;
      while
        ! wget -q -O - "$@" "${ELASTICSEARCH_URL}/_cat/health?h=status" &&
        [[ $(( retry-- )) -gt 0 ]];
      do echo "Waiting for Elasticsearch to go Green (${retry})" ; sleep 1 ; done ;
      [ "${retry}" -eq "-1" ] && exit 1
    #
    - yarn test --coverage

Test SDR data:
  stage: build
  needs:  []
  image: alpine:3.10
  allow_failure: true
  before_script:
    - apk add --no-cache jq wget
    - apk add --no-cache jq=1.6-r0 wget=1.20.3-r0
  script:
    - |-
      jq ".[].url" ./src/data/services-de-renseignement.json |
        xargs -n 1 wget --spider

#
#
#

Register:
  stage: test
  extends:
    - .base_register_docker_stage
  needs:
    - job: Lint Dockerfiles
    - job: Build
      artifacts: true
  variables:
    CONTEXT: .
    IMAGE_NAME: $CI_REGISTRY_IMAGE/www
